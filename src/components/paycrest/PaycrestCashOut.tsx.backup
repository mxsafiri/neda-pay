'use client';

import React, { useState, useEffect, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { usePrivyWallet } from '@/hooks/usePrivyWallet'
import { getTokenBalance } from '@/utils/blockchain'
import { BASE_TOKENS } from '@/utils/blockchain'
// Paycrest integration will be added later
import { ChevronDown, ArrowRight, Check, Loader2 } from 'lucide-react'

interface PaycrestCashOutProps {
  onClose?: () => void
  className?: string
}

interface PayoutMethod {
  id: string
  name: string
  type: 'bank' | 'mobile'
  currency: string
  icon: string
}

export const PaycrestCashOut: React.FC<PaycrestCashOutProps> = ({ onClose, className = '' }) => {
  // Wallet integration
  const { authenticated, embeddedWallet } = usePrivyWallet()
  
  // State management
  const [amount, setAmount] = useState('')
  const [selectedMethod, setSelectedMethod] = useState<PayoutMethod | null>(null)
  const [usdcBalance, setUsdcBalance] = useState('0')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [isProcessing, setIsProcessing] = useState(false)
  const [showMethodDropdown, setShowMethodDropdown] = useState(false)
  const [slideProgress, setSlideProgress] = useState(0)
  const [isSlideComplete, setIsSlideComplete] = useState(false)
  
  // Mock payout methods (replace with Paycrest API data)
  const payoutMethods: PayoutMethod[] = [
    { id: 'tz-bank', name: 'Tanzania Bank Transfer', type: 'bank', currency: 'TZS', icon: '🏦' },
    { id: 'tz-mobile', name: 'M-Pesa Tanzania', type: 'mobile', currency: 'TZS', icon: '📱' },
    { id: 'ke-mobile', name: 'M-Pesa Kenya', type: 'mobile', currency: 'KES', icon: '📱' },
    { id: 'ng-bank', name: 'Nigeria Bank Transfer', type: 'bank', currency: 'NGN', icon: '🏦' },
  ]

  // Fetch USDC balance
  const fetchBalance = useCallback(async () => {
    if (!embeddedWallet?.address) return
    
    try {
      const balance = await getTokenBalance(BASE_TOKENS.USDC, embeddedWallet.address as `0x${string}`)
      setUsdcBalance(balance)
    } catch (error) {
      console.error('Error fetching USDC balance:', error)
    }
  }, [embeddedWallet?.address])

  useEffect(() => {
    if (authenticated && embeddedWallet?.address) {
      fetchBalance()
    }
  }, [authenticated, embeddedWallet?.address, fetchBalance])

  // Quick amount selection
  const handleQuickAmount = (percentage: number) => {
    const balance = parseFloat(usdcBalance)
    const quickAmount = (balance * percentage / 100).toFixed(2)
    setAmount(quickAmount)
  }

  // Handle slide to cash out
  const handleSlideStart = () => {
    setSlideProgress(0)
    setIsSlideComplete(false)
  }

  const handleSlideMove = (progress: number) => {
    setSlideProgress(progress)
    if (progress >= 100 && !isSlideComplete) {
      setIsSlideComplete(true)
      handleCashOut()
    }
  }

  const handleCashOut = async () => {
    if (!selectedMethod || !amount) return
    
    setIsProcessing(true)
    try {
      // Simulate cash-out process
      await new Promise(resolve => setTimeout(resolve, 3000))
      onClose?.()
    } catch (error) {
      setError('Cash-out failed. Please try again.')
    } finally {
      setIsProcessing(false)
      setSlideProgress(0)
      setIsSlideComplete(false)
    }
  }

  const isValidAmount = amount && parseFloat(amount) > 0 && parseFloat(amount) <= parseFloat(usdcBalance)

  return (
    <div className={`fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50 ${className}`}>
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.9, opacity: 0 }}
        className="bg-gray-900 rounded-2xl p-6 w-full max-w-md mx-auto shadow-2xl border border-gray-800"
      >
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center">
              <ArrowRight className="w-5 h-5 text-white rotate-180" />
            </div>
            <div>
              <h2 className="text-xl font-semibold text-white">Cash Out</h2>
              <p className="text-sm text-gray-400">Available: {usdcBalance} USDC</p>
            </div>
          </div>
          {onClose && (
            <button
              onClick={onClose}
              className="w-8 h-8 rounded-full bg-gray-800 flex items-center justify-center text-gray-400 hover:text-white transition-colors"
            >
              ×
            </button>
          )}
        </div>

        {/* Amount Section */}
        <div className="mb-6">
          <div className="text-center mb-4">
            <div className="text-3xl font-bold text-white mb-2">
              ${amount || '0.00'}
            </div>
            <p className="text-sm text-gray-400">
              You get ≈ {selectedMethod ? (parseFloat(amount || '0') * 2559.39).toFixed(0) : '0'} {selectedMethod?.currency || 'TZS'} ↑
            </p>
          </div>

          {/* Quick Amount Buttons */}
          <div className="flex space-x-2 mb-4">
            {[25, 50, 75, 100].map((percentage) => (
              <button
                key={percentage}
                onClick={() => handleQuickAmount(percentage)}
                className={`flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-all ${
                  amount === ((parseFloat(usdcBalance) * percentage / 100).toFixed(2))
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
                }`}
              >
                {percentage}%
              </button>
            ))}
          </div>

          {/* Custom Amount Input */}
          <div className="relative">
            <input
              type="number"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              placeholder="Enter amount"
              className="w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none"
              max={usdcBalance}
              step="0.01"
            />
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm">
              USDC
            </div>
          </div>
        </div>

        {/* Payout Method Dropdown */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Payout Method
          </label>
          <div className="relative">
            <button
              onClick={() => setShowMethodDropdown(!showMethodDropdown)}
              className="w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-left flex items-center justify-between hover:border-gray-600 transition-colors"
            >
              {selectedMethod ? (
                <div className="flex items-center space-x-3">
                  <span className="text-xl">{selectedMethod.icon}</span>
                  <div>
                    <div className="text-white font-medium">{selectedMethod.name}</div>
                    <div className="text-sm text-gray-400">{selectedMethod.type === 'bank' ? 'Bank Transfer' : 'Mobile Money'}</div>
                  </div>
                </div>
              ) : (
                <span className="text-gray-400">Select payout method</span>
              )}
              <ChevronDown className={`w-5 h-5 text-gray-400 transition-transform ${showMethodDropdown ? 'rotate-180' : ''}`} />
            </button>

            <AnimatePresence>
              {showMethodDropdown && (
                <motion.div
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  className="absolute top-full left-0 right-0 mt-2 bg-gray-800 border border-gray-700 rounded-lg shadow-xl z-10 max-h-60 overflow-y-auto"
                >
                  {payoutMethods.map((method) => (
                    <button
                      key={method.id}
                      onClick={() => {
                        setSelectedMethod(method)
                        setShowMethodDropdown(false)
                      }}
                      className="w-full px-4 py-3 text-left hover:bg-gray-700 transition-colors flex items-center space-x-3 first:rounded-t-lg last:rounded-b-lg"
                    >
                      <span className="text-xl">{method.icon}</span>
                      <div>
                        <div className="text-white font-medium">{method.name}</div>
                        <div className="text-sm text-gray-400">{method.type === 'bank' ? 'Bank Transfer' : 'Mobile Money'} • {method.currency}</div>
                      </div>
                    </button>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </div>

        {/* Fee Information */}
        {selectedMethod && amount && (
          <div className="mb-6 p-4 bg-gray-800 rounded-lg">
            <div className="flex justify-between items-center text-sm mb-2">
              <span className="text-gray-400">Network fee</span>
              <span className="text-white">$0.43</span>
            </div>
            <div className="flex justify-between items-center text-sm mb-2">
              <span className="text-gray-400">Service fee</span>
              <span className="text-white">$2.57</span>
            </div>
            <div className="border-t border-gray-700 pt-2 mt-2">
              <div className="flex justify-between items-center text-sm font-medium">
                <span className="text-gray-300">Total fees</span>
                <span className="text-white">$3.00</span>
              </div>
            </div>
          </div>
        )}

        {/* Slide to Cash Out Button */}
        <div className="relative">
          <div className="bg-gray-800 rounded-full p-1 relative overflow-hidden">
            <motion.div
              className="absolute inset-y-1 left-1 bg-blue-600 rounded-full"
              style={{ width: `${Math.max(48, slideProgress)}px` }}
              transition={{ type: "spring", stiffness: 300, damping: 30 }}
            />
            <div className="relative flex items-center justify-center py-4 px-6">
              <motion.div
                className="absolute left-2 w-10 h-10 bg-white rounded-full flex items-center justify-center cursor-pointer"
                drag="x"
                dragConstraints={{ left: 0, right: 200 }}
                dragElastic={0.1}
                onDragStart={handleSlideStart}
                onDrag={(_, info) => {
                  const progress = Math.max(0, Math.min(100, (info.offset.x / 200) * 100))
                  handleSlideMove(progress)
                }}
                whileDrag={{ scale: 1.1 }}
              >
                {isProcessing ? (
                  <Loader2 className="w-5 h-5 text-blue-600 animate-spin" />
                ) : isSlideComplete ? (
                  <Check className="w-5 h-5 text-green-600" />
                ) : (
                  <ArrowRight className="w-5 h-5 text-blue-600" />
                )}
              </motion.div>
              <span className="text-white font-medium ml-12">
                {isProcessing ? 'Processing...' : isSlideComplete ? 'Complete!' : 'Slide to cash out'}
              </span>
            </div>
          </div>
          
          {!isValidAmount && (
            <p className="text-red-400 text-sm mt-2 text-center">
              {!amount ? 'Enter an amount' : parseFloat(amount) > parseFloat(usdcBalance) ? 'Insufficient balance' : 'Invalid amount'}
            </p>
          )}
          
          {!selectedMethod && (
            <p className="text-red-400 text-sm mt-2 text-center">
              Select a payout method
            </p>
          )}
        </div>

        {error && (
          <div className="mt-4 p-3 bg-red-900/50 border border-red-700 rounded-lg">
            <p className="text-red-300 text-sm">{error}</p>
          </div>
        )}
      </motion.div>
    </div>
  )
}

    try {
      // Create Paycrest order
      const orderData = {
        amount,
        token: 'USDC',
        fiat: selectedCurrency.code,
        institution_id: selectedInstitution.id,
        account_number: accountNumber,
        account_name: accountName,
        reference: `NEDApay-${Date.now()}`,
      };

      const newOrder = await createCashOutOrder(orderData);
      setOrder(newOrder);

      // Send USDC to Paycrest receiving address
      const txHash = await sendTokenTransaction(
        '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913', // USDC contract address
        newOrder.receiving_address as `0x${string}`,
        amount
      );

      if (txHash) {
        setCurrentStep('success');
      } else {
        throw new Error('Failed to send USDC transaction');
      }
    } catch (err) {
      console.error('Cash-out failed:', err);
      setError(err instanceof Error ? err.message : 'Cash-out failed. Please try again.');
      setCurrentStep('error');
    } finally {
      // setIsLoading(false);
    }
  };

  // Step navigation
  const goToNextStep = () => {
    switch (currentStep) {
      case 'amount':
        if (parseFloat(amount) > 0 && parseFloat(amount) <= parseFloat(usdcBalance || '0')) {
          updateExchangeRate();
          setCurrentStep('destination');
        } else {
          setError('Please enter a valid amount.');
        }
        break;
      case 'destination':
        if (selectedInstitution && accountNumber && accountName) {
          setCurrentStep('review');
        } else {
          setError('Please complete all destination details.');
        }
        break;
      case 'review':
        handleCreateOrder();
        break;
    }
  };

  const goToPreviousStep = () => {
    switch (currentStep) {
      case 'destination':
        setCurrentStep('amount');
        break;
      case 'review':
        setCurrentStep('destination');
        break;
      case 'error':
        setCurrentStep('review');
        break;
    }
  };

  if (!authenticated) {
    return (
      <div className={`min-h-screen ${themeColors.background.primary} flex items-center justify-center`}>
        <div className={`${themeColors.background.card} p-8 rounded-2xl shadow-lg text-center`}>
          <h2 className={`text-xl font-semibold ${themeColors.text.primary} mb-4`}>
            Authentication Required
          </h2>
          <p className={`${themeColors.text.secondary} mb-6`}>
            Please connect your wallet to access cash-out functionality.
          </p>
          <button
            onClick={() => router.push('/landing')}
            className={`px-6 py-3 ${themeColors.button.primary} rounded-lg font-medium transition-colors`}
          >
            Connect Wallet
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen ${themeColors.background.primary}`}>
      {/* Header */}
      <div className={`${themeColors.background.card} border-b ${themeColors.border.primary}`}>
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <button
              onClick={() => currentStep === 'amount' ? router.back() : goToPreviousStep()}
              className={`p-2 ${themeColors.text.secondary} hover:${themeColors.text.primary} transition-colors`}
            >
              <ArrowLeft size={24} />
            </button>
            <div>
              <h1 className={`text-2xl font-bold ${themeColors.text.primary}`}>
                Cash Out
              </h1>
              <p className={`${themeColors.text.secondary}`}>
                Convert USDC to local currency
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Progress Indicator */}
      <div className="container mx-auto px-4 py-6">
        <div className="flex items-center justify-center space-x-4 mb-8">
          {['amount', 'destination', 'review', 'processing'].map((step, index) => (
            <div key={step} className="flex items-center">
              <div
                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                  currentStep === step
                    ? 'bg-blue-600 text-white'
                    : ['success', 'error'].includes(currentStep) || 
                      ['amount', 'destination', 'review', 'processing'].indexOf(currentStep) > index
                    ? 'bg-green-600 text-white'
                    : `${themeColors.background.card} ${themeColors.text.muted} border ${themeColors.border.primary}`
                }`}
              >
                {['success', 'error'].includes(currentStep) || 
                 ['amount', 'destination', 'review', 'processing'].indexOf(currentStep) > index ? (
                  <CheckCircle size={16} />
                ) : (
                  index + 1
                )}
              </div>
              {index < 3 && (
                <div
                  className={`w-12 h-0.5 ${
                    ['success', 'error'].includes(currentStep) || 
                    ['amount', 'destination', 'review', 'processing'].indexOf(currentStep) > index
                      ? 'bg-green-600'
                      : `${themeColors.border.primary}`
                  }`}
                />
              )}
            </div>
          ))}
        </div>

        {/* Error Display */}
        {error && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-6 p-4 bg-red-100 border border-red-200 rounded-lg flex items-center gap-3"
          >
            <AlertCircle className="text-red-600" size={20} />
            <p className="text-red-800">{error}</p>
            <button
              onClick={() => setError(null)}
              className="ml-auto text-red-600 hover:text-red-800"
            >
              ×
            </button>
          </motion.div>
        )}

        {/* Step Content */}
        <div className="max-w-2xl mx-auto">
          {/* Amount Step */}
          {currentStep === 'amount' && (
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              className={`${themeColors.background.card} p-8 rounded-2xl shadow-lg`}
            >
              <div className="text-center mb-8">
                <DollarSign className="mx-auto mb-4 text-blue-600" size={48} />
                <h2 className={`text-2xl font-bold ${themeColors.text.primary} mb-2`}>
                  How much would you like to cash out?
                </h2>
                <p className={`${themeColors.text.secondary}`}>
                  Available balance: {parseFloat(usdcBalance || '0').toFixed(2)} USDC
                </p>
              </div>

              <div className="space-y-6">
                <div>
                  <label className={`block text-sm font-medium ${themeColors.text.primary} mb-2`}>
                    Amount (USDC)
                  </label>
                  <input
                    type="number"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    placeholder="0.00"
                    className={`w-full px-4 py-3 ${themeColors.background.input} ${themeColors.border.primary} border rounded-lg text-2xl text-center ${themeColors.text.primary} focus:outline-none focus:${themeColors.border.focus} focus:border-2`}
                    max={usdcBalance}
                    min="0"
                    step="0.01"
                  />
                </div>

                <div className="flex gap-2">
                  {['25', '50', '75', '100'].map((percentage) => (
                    <button
                      key={percentage}
                      onClick={() => {
                        const balance = parseFloat(usdcBalance || '0');
                        const amount = (balance * parseInt(percentage)) / 100;
                        setAmount(amount.toFixed(2));
                      }}
                      className={`flex-1 py-2 px-4 ${themeColors.button.secondary} rounded-lg text-sm font-medium transition-colors`}
                    >
                      {percentage}%
                    </button>
                  ))}
                </div>

                <button
                  onClick={goToNextStep}
                  disabled={!amount || parseFloat(amount) <= 0}
                  className={`w-full py-4 ${themeColors.button.primary} rounded-lg font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed`}
                >
                  Continue
                </button>
              </div>
            </motion.div>
          )}

          {/* Destination Step */}
          {currentStep === 'destination' && (
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              className={`${themeColors.background.card} p-8 rounded-2xl shadow-lg`}
            >
              <div className="text-center mb-8">
                <CreditCard className="mx-auto mb-4 text-blue-600" size={48} />
                <h2 className={`text-2xl font-bold ${themeColors.text.primary} mb-2`}>
                  Where should we send your money?
                </h2>
                <p className={`${themeColors.text.secondary}`}>
                  Choose your preferred payment method
                </p>
              </div>

              <div className="space-y-6">
                {/* Currency Selection */}
                <div>
                  <label className={`block text-sm font-medium ${themeColors.text.primary} mb-2`}>
                    Currency
                  </label>
                  <select
                    value={selectedCurrency?.code || ''}
                    onChange={(e) => {
                      const currency = currencies.find(c => c.code === e.target.value);
                      setSelectedCurrency(currency || null);
                      if (currency) loadInstitutions(currency.code);
                    }}
                    className={`w-full px-4 py-3 ${themeColors.background.input} ${themeColors.border.primary} border rounded-lg ${themeColors.text.primary} focus:outline-none focus:${themeColors.border.focus} focus:border-2`}
                  >
                    <option value="">Select currency</option>
                    {currencies.map((currency) => (
                      <option key={currency.code} value={currency.code}>
                        {currency.name} ({currency.symbol})
                      </option>
                    ))}
                  </select>
                </div>

                {/* Institution Selection */}
                {selectedCurrency && (
                  <div>
                    <label className={`block text-sm font-medium ${themeColors.text.primary} mb-2`}>
                      Payment Provider
                    </label>
                    <select
                      value={selectedInstitution?.id || ''}
                      onChange={(e) => {
                        const institution = institutions.find(i => i.id === e.target.value);
                        setSelectedInstitution(institution || null);
                      }}
                      className={`w-full px-4 py-3 ${themeColors.background.input} ${themeColors.border.primary} border rounded-lg ${themeColors.text.primary} focus:outline-none focus:${themeColors.border.focus} focus:border-2`}
                    >
                      <option value="">Select provider</option>
                      {institutions.map((institution) => (
                        <option key={institution.id} value={institution.id}>
                          {institution.name} ({institution.type})
                        </option>
                      ))}
                    </select>
                  </div>
                )}

                {/* Account Details */}
                {selectedInstitution && (
                  <>
                    <div>
                      <label className={`block text-sm font-medium ${themeColors.text.primary} mb-2`}>
                        Account Number
                      </label>
                      <div className="flex gap-2">
                        <input
                          type="text"
                          value={accountNumber}
                          onChange={(e) => setAccountNumber(e.target.value)}
                          placeholder="Enter account number"
                          className={`flex-1 px-4 py-3 ${themeColors.background.input} ${themeColors.border.primary} border rounded-lg ${themeColors.text.primary} focus:outline-none focus:${themeColors.border.focus} focus:border-2`}
                        />
                        <button
                          onClick={handleVerifyAccount}
                          disabled={!accountNumber || isVerifyingAccount}
                          className={`px-6 py-3 ${themeColors.button.primary} rounded-lg font-medium transition-colors disabled:opacity-50`}
                        >
                          {isVerifyingAccount ? 'Verifying...' : 'Verify'}
                        </button>
                      </div>
                    </div>

                    {accountName && (
                      <div className="p-4 bg-green-100 border border-green-200 rounded-lg">
                        <p className="text-green-800 font-medium">
                          Account verified: {accountName}
                        </p>
                      </div>
                    )}
                  </>
                )}

                <button
                  onClick={goToNextStep}
                  disabled={!selectedInstitution || !accountNumber || !accountName}
                  className={`w-full py-4 ${themeColors.button.primary} rounded-lg font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed`}
                >
                  Continue
                </button>
              </div>
            </motion.div>
          )}

          {/* Review Step */}
          {currentStep === 'review' && (
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              className={`${themeColors.background.card} p-8 rounded-2xl shadow-lg`}
            >
              <div className="text-center mb-8">
                <CheckCircle className="mx-auto mb-4 text-blue-600" size={48} />
                <h2 className={`text-2xl font-bold ${themeColors.text.primary} mb-2`}>
                  Review your cash-out
                </h2>
                <p className={`${themeColors.text.secondary}`}>
                  Please confirm the details below
                </p>
              </div>

              <div className="space-y-6">
                {/* Transaction Summary */}
                <div className={`p-6 ${themeColors.background.input} rounded-lg space-y-4`}>
                  <div className="flex justify-between">
                    <span className={themeColors.text.secondary}>Amount</span>
                    <span className={`font-semibold ${themeColors.text.primary}`}>
                      {amount} USDC
                    </span>
                  </div>
                  
                  {exchangeRate && (
                    <>
                      <div className="flex justify-between">
                        <span className={themeColors.text.secondary}>Exchange Rate</span>
                        <span className={`font-semibold ${themeColors.text.primary}`}>
                          1 USDC = {exchangeRate.rate} {selectedCurrency?.code}
                        </span>
                      </div>
                      
                      <div className="flex justify-between">
                        <span className={themeColors.text.secondary}>Fee</span>
                        <span className={`font-semibold ${themeColors.text.primary}`}>
                          {exchangeRate.fee} {selectedCurrency?.code}
                        </span>
                      </div>
                      
                      <div className="border-t pt-4 flex justify-between">
                        <span className={`font-semibold ${themeColors.text.primary}`}>
                          You&apos;ll receive
                        </span>
                        <span className={`font-bold text-lg ${themeColors.text.primary}`}>
                          {exchangeRate.total} {selectedCurrency?.code}
                        </span>
                      </div>
                    </>
                  )}
                </div>

                {/* Destination Details */}
                <div className={`p-6 ${themeColors.background.input} rounded-lg space-y-4`}>
                  <h3 className={`font-semibold ${themeColors.text.primary}`}>
                    Destination
                  </h3>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className={themeColors.text.secondary}>Provider</span>
                      <span className={themeColors.text.primary}>{selectedInstitution?.name}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className={themeColors.text.secondary}>Account</span>
                      <span className={themeColors.text.primary}>{accountNumber}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className={themeColors.text.secondary}>Name</span>
                      <span className={themeColors.text.primary}>{accountName}</span>
                    </div>
                  </div>
                </div>

                <button
                  onClick={goToNextStep}
                  className={`w-full py-4 ${themeColors.button.primary} rounded-lg font-semibold transition-colors`}
                >
                  Confirm Cash-out
                </button>
              </div>
            </motion.div>
          )}

          {/* Processing Step */}
          {currentStep === 'processing' && (
            <motion.div
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              className={`${themeColors.background.card} p-8 rounded-2xl shadow-lg text-center`}
            >
              <Clock className="mx-auto mb-4 text-blue-600 animate-spin" size={48} />
              <h2 className={`text-2xl font-bold ${themeColors.text.primary} mb-4`}>
                Processing your cash-out...
              </h2>
              <p className={`${themeColors.text.secondary} mb-8`}>
                Please wait while we process your transaction. This may take a few moments.
              </p>
              <LoadingState size="lg" text="Processing..." />
            </motion.div>
          )}

          {/* Success Step */}
          {currentStep === 'success' && order && (
            <motion.div
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              className={`${themeColors.background.card} p-8 rounded-2xl shadow-lg text-center`}
            >
              <CheckCircle className="mx-auto mb-4 text-green-600" size={48} />
              <h2 className={`text-2xl font-bold ${themeColors.text.primary} mb-4`}>
                Cash-out initiated successfully!
              </h2>
              <p className={`${themeColors.text.secondary} mb-8`}>
                Your cash-out order has been created and is being processed.
              </p>

              <div className={`p-6 ${themeColors.background.input} rounded-lg mb-8 text-left`}>
                <h3 className={`font-semibold ${themeColors.text.primary} mb-4`}>
                  Order Details
                </h3>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className={themeColors.text.secondary}>Order ID</span>
                    <span className={`font-mono text-sm ${themeColors.text.primary}`}>
                      {order.id.slice(0, 8)}...
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={themeColors.text.secondary}>Status</span>
                    <span className={`px-2 py-1 rounded text-xs font-medium ${getOrderStatusBadge(order.status)}`}>
                      {order.status.toUpperCase()}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={themeColors.text.secondary}>Amount</span>
                    <span className={themeColors.text.primary}>
                      {order.amount} USDC → {order.total_amount} {selectedCurrency?.code}
                    </span>
                  </div>
                </div>
              </div>

              <div className="flex gap-4">
                <button
                  onClick={() => router.push('/wallet')}
                  className={`flex-1 py-3 ${themeColors.button.secondary} rounded-lg font-medium transition-colors`}
                >
                  Back to Wallet
                </button>
                <button
                  onClick={() => router.push('/activity')}
                  className={`flex-1 py-3 ${themeColors.button.primary} rounded-lg font-medium transition-colors`}
                >
                  View Activity
                </button>
              </div>
            </motion.div>
          )}

          {/* Error Step */}
          {currentStep === 'error' && (
            <motion.div
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              className={`${themeColors.background.card} p-8 rounded-2xl shadow-lg text-center`}
            >
              <AlertCircle className="mx-auto mb-4 text-red-600" size={48} />
              <h2 className={`text-2xl font-bold ${themeColors.text.primary} mb-4`}>
                Cash-out failed
              </h2>
              <p className={`${themeColors.text.secondary} mb-8`}>
                {error || 'Something went wrong. Please try again.'}
              </p>

              <div className="flex gap-4">
                <button
                  onClick={() => router.push('/wallet')}
                  className={`flex-1 py-3 ${themeColors.button.secondary} rounded-lg font-medium transition-colors`}
                >
                  Back to Wallet
                </button>
                <button
                  onClick={goToPreviousStep}
                  className={`flex-1 py-3 ${themeColors.button.primary} rounded-lg font-medium transition-colors`}
                >
                  Try Again
                </button>
              </div>
            </motion.div>
          )}
        </div>
      </div>
    </div>
  );
};
